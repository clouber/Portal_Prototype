/**
 * @fileOverview Clouber Portlet js library.
 * @author  <a href="mailto:jzhouj@gmail.com">Jon Zhou</a>
 * @version 0.1.0
 * @license
 */

Clouber.namespace("Clouber.sys.portlet");

/**
 * The Portlet interface is used by the portlet container to invoke the
 * portlets. Every portlet has to implement this interface, either by directly
 * implementing it, or by using an existing class implementing the Portlet
 * interface.
 *
 * It is managed by the portlet container and processes requests and generates
 * dynamic content as response. Portlets are used by portals as pluggable user
 * interface components.
 *
 * The content generated by a portlet is called a fragment. A fragment is a
 * piece of markup (e.g. HTML, XHTML, WML) adhering to certain rules and can be
 * aggregated with other fragments into a complete document. The content of a
 * portlet is normally aggregated with the content of other portlets into the
 * portal page.
 *
 * The portlet container instantiates portlets, manages their lifecycle and
 * invoking them to process requests. The lifecycle consists of:
 *   •initializing the portlet using using the init method
 *   •request processsing
 *   •taking the portlet out of service using the destroy method
 *
 * Request processing is divided into two types:
 *   •action requests handled through the processAction method, to perform
 * actions targeted to the portlet.
 *   •render requests handled through the render method, to perform the render
 *   operation.
 * @interface
 */
Clouber.sys.portal.Portlet = function () {
    'use strict';

    /**
     * A convenience method which can be overridden so that there's no need to call super.init(config).
     * @function
     */
    this.init = function () {};

    /**
     * Called by the portlet container to indicate to a portlet that the portlet
     * is being placed into service.
     * @function
     * @param {}
     * @param {}
     * @return {}
     */
    this.init = function (PortletConfig config) {};

    /**
     * Called by the portlet container to indicate to a portlet that the portlet
     * is being taken out of service.
     * @function
     */
    this.destroy = function () {};

    /**
     * The default implementation of this method routes the render request to:
     * method annotated with @RenderMode and the name of the portlet mode a set
     * of helper methods depending on the current portlet mode the portlet is
     * currently in.
     * @function
     * @param {}
     * @param {}
     * @return {}
     */
    this.doDispatch = function (RenderRequest request, RenderResponse response) {};

    /**
     * Helper method to serve up the edit mode.
     * @function
     * @param {}
     * @param {}
     * @return {}
     */
    this.doEdit = function (RenderRequest request, RenderResponse response) {};


    /**
     * Used by the render method to set the response properties and headers.
     * @function
     * @param {}
     * @param {}
     * @return {}
     */
    this.doHeaders = function (RenderRequest request, RenderResponse response) {};


    /**
     * Helper method to serve up the help mode.
     * @function
     * @param {}
     * @param {}
     * @return {}
     */
    this.doHelp = function (RenderRequest request, RenderResponse response) {};


    /**
     * Helper method to serve up the mandatory view mode.
     * @function
     * @param {}
     * @param {}
     * @return {}
     */
    this.doView = function (RenderRequest request, RenderResponse response) {};


    /**
     * Returns the container runtime options and values for this portlet.
     * @function
     * @return {arry} name/value map
     */
    this.getContainerRuntimeOptions = function () {};


    /**
     * Returns the default namespace for events and public parameters.
     * @function
     * @return {string}
     */
    this.getDefaultNamespace = function () {};


    /**
     * Returns a String containing the value of the named initialization *
     * parameter, or null if the parameter does not exist.
     * @function
     * @param {}
     * @param {}
     * @return {string}
     */
    this.getInitParameter = function (java.lang.String name) {};


    /**
     * Returns the names of the portlet initialization parameters as an
     * Enumeration of String objects, or an empty Enumeration if the portlet
     * has no initialization parameters.
     * @function
     * @param {}
     * @param {}
     * @return {array}
     */
    this.getInitParameterNames = function () {};


    /**
     * Used by the render method to set the next possible portlet modes.
     * @function
     * @param {}
     * @param {}
     * @return {array}
     */
    this.getNextPossiblePortletModes = function (RenderRequest request) {};


    /**
     * Returns the PortletConfig object of this portlet.
     * @function
     * @return {object} PortletConfig
     */
    this.getPortletConfig = function () {};


    /**
     * Returns the PortletContext of the portlet application the portlet is in.
     * @function
     * @return {object} PortletContext
     */
    this.getPortletContext = function () {};


    /**
     * Returns the name of this portlet.
     * @function
     * @return {string}
     */
    this.getPortletName = function () {};


    /**
     * Returns the QNames of the processing events supported by the portlet as
     * an Enumeration of QName objects, or an empty Enumeration if the portlet
     * has not defined any processing events. Event names are represented as
     * QNames to identify them uniquely.
     * @function
     * @return {array} QName
     */
    this.getProcessingEventQNames = function () {};


    /**
     * Returns the names of the public render parameters supported by the
     * portlet as an Enumeration of String objects, or an empty Enumeration if
     * the portlet has no public render parameters.
     * @function
     * @return {array} Strings.
     */
    this.getPublicRenderParameterNames = function () {};



    /**
     * Returns the QNames of the publishing events supported by the portlet as
     * an Enumeration of QName objects, or an empty Enumeration if the portlet
     * has not defined any publishing events..
     * @function
     * @return {array} QNames
     */
    this.getPublishingEventQNames = function () {};


    /**
     * Gets the resource bundle for the given locale based on the resource
     * bundle defined in the deployment descriptor with resource-bundle tag or
     * the inlined resources defined in the deployment descriptor.
     * @function
     * @param {}
     * @return {object} ResourceBundle
     */
    this.getResourceBundle = function (java.util.Locale locale) {};


    /**
     * Returns the locales supported by the portlet as an Enumeration of Locale
     * objects, or an empty Enumeration if the portlet has not defined any
     * supported locales.
     * @function
     * @return {array} Locales
     */
    this.getSupportedLocales = function () {};


    /**
     * Used by the render method to get the title.
     * @function
     * @param {}
     * @param {}
     * @return {string}
     */
    this.getTitle = function (RenderRequest request) {};



    /**
     * Called by the portlet container to allow the portlet to process an action
     * request..
     * @function
     * @param {}
     * @param {}
     * @return {}
     */
    this.processAction = function (ActionRequest request, ActionResponse response) {};


    /**
     * The default implementation tries to dispatch to a method annotated with
     * @ProcessEvent that matches the event name or, if no such method is found
     * just sets the current render parameters on the response.
     *  Note that the annotated methods needs to be public in order to be
     * allowed to be called by GenericPortlet..
     * @function
     * @param {}
     * @param {}
     * @return {}
     */
    this.processEvent = function (EventRequest request, EventResponse response) {};


    /**
     * The default implementation of this method sets the headers using the
     * doHeaders method, sets the title using the getTitle method and invokes
     * the doDispatch method.
     * @function
     * @param {}
     * @param {}
     * @return {}
     */
    this.render = function (RenderRequest request, RenderResponse response) {};


    /**
     * Default resource serving..
     * @function
     * @param {}
     * @param {}
     * @return {}
     */
    this.serveResource = function (ResourceRequest request, ResourceResponse response) {};
};



/**
 * @interface  Portlet window interface.
 */
Clouber.sys.portal.IWindow = function () {

    /**
     * Set a widget's title in the container's title bar.
     * @param {object} params function settings.
     * @param  params.index component's index
     */
    this.setContTitleBar = function (params) {};

    /**
     * Set a widget's title bar.
     * @param {object} params function settings.
     * @param  params.index component's index
     */
    this.setTitleBar = function (params) {};

    /**
     * Set a widget's status bar.
     * @param {object} params function settings.
     * @param  params.index component's index
     */
    this.setStatusBar = function (params) {};

    /**
     * Set a widget's border.
     * @param {object} params function settings.
     * @param  params.index component's index
     */
    this.setBorder = function (params) {};

    /**
     * Set a widget's option Button in the title bar.
     * @param {object} params function settings.
     * @param  params.index component's index
     */
    this.setOption = function (params) {};

    /**
     * Set a widget's css.
     * @param {object} params function settings.
     * @param  params.index component's index
     */
    this.setCss = function (params) {};

    /**
     * Minimize the widget.
     * @param {object} params function settings.
     * @param  params.index component's index
     */
    this.minimize = function (params) {};

    /**
     * Maximize the widget.
     * @param {object} params function settings.
     * @param  params.index component's index
     */
    this.maximize = function (params) {};

    /**
     * Close the widget.
     * @param {object} params function settings.
     * @param  params.index component's index
     */
    this.close = function (params) {};

    /**
     * Popup the widget.
     * @param {object} params function settings.
     * @param  params.index component's index
     */
    this.popup = function (params) {};

    /**
     * Restore the widget - quit popup status.
     * @param {object} params function settings.
     * @param  params.index component's index
     */
    this.restore = function (params) {};

    /**
     * active this widget in a multi-widget container.
     * @param {object} params function settings.
     * @param  params.index component's index
     */
    this.active = function () {};
};


/**
 * @class  The MVC based controller of Portlet.
 * @extends Clouber.sys.ui.ComponentController
 * @constructor
 * @param {object} params Object initial settings.
 * @param  params.app application name
 * @param  params.version application version
 * @param  params.module application module
 * @param  params.control control name
 * @param  params.theme web page theme, include htmls, CSSs, images
 * @param  params.target web page target tag
 * @param  params.style web page layout style
 * @param  params.title  control title
 * @param  params.variable variable instance name
 * @param  params.index index of container's components
 */
Clouber.sys.portal.Portlet = function (params) {
    'use strict';
    this.TYPE = "PORTLET_CONTROLLER";

    /**
     * Set a widget's title in the container's title bar.
     * @param {object} params function settings.
     * @param  params.index component's index
     */
    this.setContTitleBar = function (params) {
        params = Clouber.merge(params, {index: this.settings.index});
        this.container.setContTitleBar(params);
    };

    /**
     * Set a widget's title bar.
     * @param {object} params function settings.
     * @param  params.index component's index
     */
    this.setTitleBar = function (params) {
        params = Clouber.merge(params, {index: this.settings.index});
        this.container.setTitleBar(params);
    };

    /**
     * Set a widget's status bar.
     * @param {object} params function settings.
     * @param  params.index component's index
     */
    this.setStatusBar = function (params) {
        params = Clouber.merge(params, {index: this.settings.index});
        this.container.setStatusBar(params);
    };

    /**
     * Set a widget's border.
     * @param {object} params function settings.
     * @param  params.index component's index
     */
    this.setBorder = function (params) {
        params = Clouber.merge(params, {index: this.settings.index});
        this.container.setBorder(params);
    };

    /**
     * Set a widget's option Button in the title bar.
     * @param {object} params function settings.
     * @param  params.index component's index
     */
    this.setOption = function (params) {
        params = Clouber.merge(params, {index: this.settings.index});
        this.container.setOption(params);
    };

    /**
     * Set a widget's css.
     * @param {object} params function settings.
     * @param  params.index component's index
     */
    this.setCss = function (params) {
        params = Clouber.merge(params, {index: this.settings.index});
        this.container.setCss(params);
    };

    /**
     * Minimize the widget.
     * @param {object} params function settings.
     * @param  params.index component's index
     */
    this.minimize = function (params) {
        params = Clouber.merge(params, {index: this.settings.index});
        this.container.minimize(params);
    };

    /**
     * Maximize the widget.
     * @param {object} params function settings.
     * @param  params.index component's index
     */
    this.maximize = function (params) {
        params = Clouber.merge(params, {index: this.settings.index});
        this.container.maximize(params);
    };

    /**
     * Close the widget.
     * @param {object} params function settings.
     * @param  params.index component's index
     */
    this.close = function (params) {
        params = Clouber.merge(params, {index: this.settings.index});
        this.container.close(params);
    };

    /**
     * Popup the widget.
     * @param {object} params function settings.
     * @param  params.index component's index
     */
    this.popup = function (params) {
        params = Clouber.merge(params, {index: this.settings.index});
        this.container.popup(params);
    };

    /**
     * Restore the widget - quit popup status.
     * @param {object} params function settings.
     * @param  params.index component's index
     */
    this.restore = function (params) {
        params = Clouber.merge(params, {index: this.settings.index});
        this.container.restore(params);
    };

    /**
     * active this widget in a multi-widget container.
     * @param {object} params function settings.
     * @param  params.index component's index
     */
    this.active = function () {
        this.container.active(this.settings.index);
    };
    // initialization
    this.setting(params);
};
/** @inherits inherit from Clouber.sys.ui.ComponentController */
Clouber.extend(Clouber.sys.portal.Portlet, Clouber.sys.ui.ComponentController);

/**
 * @class  The MVC based view object of Portlet
 * @extends Clouber.sys.ui.ComponentView
 * @constructor
 * @param {object} params Object initial settings.
 * @param  params.app application name
 * @param  params.version application version
 * @param  params.module application module
 * @param  params.control control name
 * @param  params.theme web page theme, include htmls, CSSs, images
 * @param  params.target web page target tag
 * @param  params.style web page layout style
 * @param  params.title  control title
 * @param  params.variable variable instance name
 * @param  params.index index of container's components
 */
Clouber.sys.portal.PortletView = function (params) {
    'use strict';
    this.TYPE = "PORTLET_VIEW";

    // initialization
    this.setting(params);
};
/** @inherits inherit from Clouber.sys.ui.ComponentView */
Clouber.extend(Clouber.sys.portal.PortletView, Clouber.sys.ui.ComponentView);

