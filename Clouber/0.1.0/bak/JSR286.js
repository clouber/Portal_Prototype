/**
* @fileOverview Clouber Portlet interfaces' declaration, refer to JSR286.
* @author  <a href="mailto:jzhouj@gmail.com">Jon Zhou</a>
* @version 0.1.0
* @license
*/

Clouber.namespace("Clouber.sys.portlet");


/**
* <JSR-286> The Portlet interface is used by the portlet container to invoke the
* portlets. Every portlet has to implement this interface, either by directly
* implementing it, or by using an existing class implementing the Portlet
* interface.
*
* It is managed by the portlet container and processes requests and generates
* dynamic content as response. Portlets are used by portals as pluggable user
* interface components.
*
* The content generated by a portlet is called a fragment. A fragment is a
* piece of markup (e.g. HTML, XHTML, WML) adhering to certain rules and can be
* aggregated with other fragments into a complete document. The content of a
* portlet is normally aggregated with the content of other portlets into the
* portal page.
*
* The portlet container instantiates portlets, manages their lifecycle and
* invoking them to process requests. The lifecycle consists of:
*   •initializing the portlet using using the init method
*   •request processsing
*   •taking the portlet out of service using the destroy method
*
* Request processing is divided into two types:
*   •action requests handled through the processAction method, to perform
* actions targeted to the portlet.
*   •render requests handled through the render method, to perform the render
*   operation.
* @class
*/
Clouber.sys.portlet.Portlet = function () {
    'use strict';

    /**
    * A convenience method which can be overridden so that there's no need to
    * call super.init(config).
    * @function
    */
    this.init = function () {};

    /**
    * Called by the portlet container to indicate to a portlet that the portlet
    * is being placed into service.
    * @function
    * @param {object} PortletConfig
    */
    this.init = function (config) {};

    /**
    * Called by the portlet container to indicate to a portlet that the portlet
    * is being taken out of service.
    * @function
    */
    this.destroy = function () {};

    /**
    * Called by the portlet container to allow the portlet to process an action
    * request..
    * @function
    * @param {object} request ActionRequest
    * @param {object} response ActionResponse
    */
    this.processAction = function (request,  response) {};

    /**
    * The default implementation of this method sets the headers using the
    * doHeaders method, sets the title using the getTitle method and invokes
    * the doDispatch method.
    * @function
    * @param {object} request RenderRequest
    * @param {object} response RenderResponse
    */
    this.render = function (request,  response) {};

};

/**
* <JSR-286> public interface EventPortlet
* The EventPortlet interface allows portlets receiving events.
*
* Events are part of the action processing and must be finished before the
* rendering phase can start. Portlets can receive events issued by other
* portlets or portlet container defined events.
*
* Portlets should declare the events it would like to receive via the
* supported-processing-event tag and events published via the
* supported-publishing-event tag in the portlet deployment descriptor.
*
* The event model is a loosely coupled model where the wiring between published
* and receiving events is done at the portal / portlet container level.
* @interface
*/
Clouber.sys.portlet.EventPortlet = function () {
    'use strict';

    /**
    * The default implementation tries to dispatch to a method annotated with
    * @ProcessEvent that matches the event name or, if no such method is found
    * just sets the current render parameters on the response.
    *  Note that the annotated methods needs to be public in order to be
    * allowed to be called by GenericPortlet..
    * @function
    * @param {object} request EventRequest
    * @param {object} response EventResponse
    */
    this.processEvent = function (request,  response) {};

};

/**
* <JSR-286> public interface ResourceServingPortlet
* The ResourceServingPortlet interface allows serving resources through the
* portlet.
*
* The portlet container must call this method for links created by the
* RenderResponse.createResourceURL() call. If the portlet creates resource
* URLs with RenderResponse.createResourceURL() it must implement this lifecycle
* method.
* @interface
*/
Clouber.sys.portlet.ResourceServingPortlet = function () {
    'use strict';

    /**
    * The default implementation tries to dispatch to a method annotated with
    * @ProcessEvent that matches the event name or, if no such method is found
    * just sets the current render parameters on the response.
    *  Note that the annotated methods needs to be public in order to be
    * allowed to be called by GenericPortlet..
    * @function
    * @param {object} request EventRequest
    * @param {object} response EventResponse
    */
    this.processEvent = function (request, response) {};

};


/**
* <JSR-286> public interface PortletRequest
* The PortletRequest defines the base interface to provide client request
* information to a portlet. The portlet container uses two specialized versions
* of this interface when invoking a portlet, ActionRequest and RenderRequest.
* The portlet container creates these objects and passes them as arguments to
* the portlet's processAction and render methods.
* @interface
*/
Clouber.sys.portlet.PortletRequest = function () {
    'use strict';

    /**
    * Returns the value of the named attribute as an Object, or null if no
    * attribute of the given name exists.
    * @function
    * @param {String} name
    * @return {object}
    */
    this.getAttribute = function (name) {};

    /**
    * Returns an Enumeration containing the names of the attributes available
    * to this request.
    * @function
    * @return {array(string)}
    */
    this.getAttributeNames = function () {};

    /**
    * Returns the name of the authentication scheme used for the connection
    * between client and portal, for example, BASIC_AUTH, CLIENT_CERT_AUTH, a
    * custom one or null if there was no authentication.
    * @function
    * @return {String}
    */
    this.getAuthType = function () {};

    /**
    * Returns the context path which is the path prefix associated with the
    * deployed portlet application.
    * @function
    * @param {}
    * @param {}
    * @return {String}
    */
    this.getContextPath = function () {};

    /**
    * Returns an array containing all of the Cookie properties.
    * @function
    * @return {array} Cookies
    */
    this.getCookies = function () {};

    /**
    * Returns the preferred Locale in which the portal will accept content.
    * @function
    * @return {object} Locale
    */
    this.getLocale = function () {};

    /**
    * Returns an Enumeration of Locale objects indicating, in decreasing order
    * starting with the preferred locale in which the portal will accept
    * content for this request.
    * @function
    * @param {}
    * @param {}
    * @return {array} Locales
    */
    this.getLocales = function () {};

    /**
    * Returns the value of a request parameter as a String, or null if the
    * parameter does not exist.
    * @function
    * @param {String} name
    * @return {String}
    */
    this.getParameter = function (name) {};

    /**
    * Returns a Map of the parameters of this request.
    * @function
    * @param {}
    * @param {}
    * @return {array} name/value string map
    */
    this.getParameterMap = function () {};

    /**
    * Returns an Enumeration of String objects containing the names of the
    * parameters contained in this request.
    * @function
    * @return {array(string)}
    */
    this.getParameterNames = function () {};

    /**
    * Returns an array of String objects containing all of the values the given
    * request parameter has, or null if the parameter does not exist.
    * @function
    * @param {String} name
    * @param {}
    * @return {array(string)}
    */
    this.getParameterValues = function (name) {};

    /**
    * Returns the context of the calling portal.
    * @function
    * @param {}
    * @param {}
    * @return {object} PortalContext
    */
    this.getPortalContext = function () {};

    /**
    * Returns the current portlet mode of the portlet.
    * @function
    * @param {}
    * @param {}
    * @return {object} PortletMode
    */
    this.getPortletMode = function () {};

    /**
    * Returns the current portlet session or, if there is no current session,
    * creates one and returns the new session.
    * @function
    * @return {object} PortletSession
    */
    this.getPortletSession = function () {};

    /**
    * Returns the current portlet session or, if there is no current session
    * and the given flag is true, creates one and returns the new session.
    * @function
    * @param {boolean} create
    * @return {object} PortletSession
    */
    this.getPortletSession = function (create) {};

    /**
    * Returns the preferences object associated with the portlet.
    * @function
    * @return {object} PortletPreferences
    */
    this.getPreferences = function () {};

    /**
    * Returns a Map of the private parameters of this request.
    * @function
    * @return {array} name/value map
    */
    this.getPrivateParameterMap = function () {};

    /**
    * Returns all the values of the specified request property as a Enumeration
    * of String objects.
    * @function
    * @param {String} name
    * @return {array(string)}
    */
    this.getProperties = function (name) {};

    /**
    * Returns the value of the specified request property as a String.
    * @function
    * @param {String} name
    * @return {String}
    */
    this.getProperty = function (name) {};

    /**
    * Returns a Enumeration of all the property names this request contains.
    * @function
    * @param {}
    * @param {}
    * @return {array(string)}
    */
    this.getPropertyNames = function () {};

    /**
    * Returns a Map of the public parameters of this request.
    * @function
    * @return {array} name/value map
    */
    this.getPublicParameterMap = function () {};

    /**
    * Returns the login of the user making this request, if the user has been
    * authenticated, or null if the user has not been authenticated.
    * @function
    * @return {String}
    */
    this.getRemoteUser = function () {};

    /**
    * Returns the session ID indicated in the client request.
    * @function
    * @return {String}
    */
    this.getRequestedSessionId = function () {};

    /**
    * Returns the portal preferred content type for the response.
    * @function
    * @return {String}
    */
    this.getResponseContentType = function () {};

    /**
    * Gets a list of content types which the portal accepts for the response.
    * @function
    * @return {array(string)}
    */
    this.getResponseContentTypes = function () {};

    /**
    * Returns the name of the scheme used to make this request.
    * @function
    * @return {String}
    */
    this.getScheme = function () {};

    /**
    * Returns the host name of the server that received the request.
    * @function
    * @return {String}
    */
    this.getServerName = function () {};

    /**
    * Returns the port number on which this request was received.
    * @function
    * @return {int}
    */
    this.getServerPort = function () {};

    /**
    * Returns a java.security.Principal object containing the name of the
    * current authenticated user.
    * @function
    * @return {object} Principal
    */
    this.getUserPrincipal = function () {};

    /**
    * Returns the portlet window ID.
    * @function
    * @return {String}
    */
    this.getWindowID = function () {};

    /**
    * Returns the current window state of the portlet.
    * @function
    * @return {object} WindowState
    */
    this.getWindowState = function () {};

    /**
    * Returns true, if the given portlet mode is a valid one to set for this
    * portlet in the context of the current request.
    * @function
    * @param {object} mode PortletMode.
    * @return {boolean}
    */
    this.isPortletModeAllowed = function (mode) {};

    /**
    * Checks whether the requested session ID is still valid.
    * @function
    * @param {}
    * @param {}
    * @return {boolean}
    */
    this.isRequestedSessionIdValid = function () {};

    /**
    * Returns a boolean indicating whether this request was made using a secure
    * channel between client and the portal, such as HTTPS.
    * @function
    * @param {}
    * @param {}
    * @return {boolean}
    */
    this.isSecure = function () {};

    /**
    * Returns a boolean indicating whether the authenticated user is included
    * in the specified logical "role".
    * @function
    * @param {sring} role
    * @param {}
    * @return {boolean}
    */
    this.isUserInRole = function (role) {};

    /**
    * Returns true, if the given window state is valid to be set for this
    * portlet in the context of the current request.
    * @function
    * @param {object} state WindowState
    * @return {boolean}
    */
    this.isWindowStateAllowed = function (state) {};
    /**
    * Removes an attribute from this request.
    * @function
    * @param {String} name
    */
    this.removeAttribute = function (name) {};

    /**
    * Stores an attribute in this request.
    * @function
    * @param {string} name
    * @param {object} o
    */
    this.setAttribute = function (name, o) {};

};

/**
* <JSR-286> public interface ClientDataRequest
* extends PortletRequest
* The ClientDataRequest represents the request information of the HTTP request
* issued from the client to the portal.
* It extends the PortletRequest interface.
* @extends Clouber.sys.portlet.PortletRequest
* @interface
*/
Clouber.sys.portlet.ClientDataRequest = function () {
    'use strict';


    /**
    * Returns the name of the character encoding used in the body of this
    * request.
    * @function
    * @return {String}
    */
    this.getCharacterEncoding = function () {};

    /**
    * Returns the length, in bytes, of the request body which is made available
    * by the input stream, or -1 if the length is not known.
    * @function
    * @return {int}
    */
    this.getContentLength = function () {};

    /**
    * Returns the MIME type of the body of the request, or null if the type is not known.
    * @function
    * @return {String}
    */
    this.getContentType = function () {};

    /**
    * Returns the name of the HTTP method with which this request was made, for
    * example, GET, POST, or PUT.
    * @function
    * @return {String}
    */
    this.getMethod = function () {};

    /**
    * Retrieves the body of the HTTP request from client to portal as binary
    * data using an InputStream.
    * @function
    * @return {object} InputStream
    */
    this.getPortletInputStream = function () {};

    /**
    * Retrieves the body of the HTTP request from the client to the portal as
    * character data using a BufferedReader.
    * @function
    * @return {object} BufferedReader
    */
    this.getReader = function () {};

    /**
    * Overrides the name of the character encoding used in the body of this
    * request.
    * @function
    * @param {String} enc
    */
    this.setCharacterEncoding = function (enc) {};

};
Clouber.extend(Clouber.sys.portlet.ClientDataRequest,
    Clouber.sys.portlet.PortletRequest);

/**
* <JSR-286> public interface ActionRequest
* extends ClientDataRequest
* The ActionRequest represents the request sent to the portlet to handle an
* action.
*  It extends the ClientDataRequest interface and provides action request
* information to portlets.
* The portlet container creates an ActionRequest object and passes it as
* argument to the portlet's processAction method.
* @extends Clouber.sys.portlet.PortletRequest
* @interface
*/
Clouber.sys.portlet.ActionRequest = function () {
    'use strict';

};
Clouber.extend(Clouber.sys.portlet.ActionRequest,
    Clouber.sys.portlet.ClientDataRequest);

/**
* <JSR-286> public interface EventRequestextends PortletRequest
* The EventRequest represents the request sent to the portlet to handle an
* event. It extends the PortletRequest interface to provide event request
* information to portlets.
* The portlet container creates an EventRequest object and passes it as
* argument to the portlet's processEvent method.
* @extends Clouber.sys.portlet.PortletRequest
* @interface
*/
Clouber.sys.portlet.EventRequest = function () {
    'use strict';

    /**
    * Returns the event that triggered the call to the processEvent method.
    * @function
    * @return {object} Event
    */
    this.getEvent = function () {};

    /**
    * Returns the name of the HTTP method with which the original action
    * request was made, for example, POST, or PUT.
    * @function
    * @return {String}
    */
    this.getMethod = function () {};


};
Clouber.extend(Clouber.sys.portlet.EventRequest,
    Clouber.sys.portlet.PortletRequest);

/**
* <JSR-286> public interface RenderRequest
* extends PortletRequest
* The RenderRequest represents the request sent to the portlet to handle a
* render. It extends the PortletRequest interface to provide render request
* information to portlets.
* The portlet container creates a RenderRequest object and passes it as
* argument to the portlet's render method.
* @extends Clouber.sys.portlet.PortletRequest
* @interface
*/
Clouber.sys.portlet.RenderRequest = function () {
    'use strict';

    /**
    * Returns the validation tag if the portlet container has a cached response
    * for this validation tag, or null if no cached response exists.
    * @function
    * @return {String}
    */
    this.getETag = function () {};

};
Clouber.extend(Clouber.sys.portlet.RenderRequest,
    Clouber.sys.portlet.PortletRequest);

/**
* <JSR-286> public interface ResourceRequest
* extends ClientDataRequest
* The ResourceRequest interface represents the request send to the portlet for
* rendering resources. It extends the ClientDataRequest interface and provides
* resource request information to portlets.
* The portlet container creates an ResourceRequest object and passes it as
* argument to the portlet's serveResource method.
*
* The ResourceRequest is provided with the current portlet mode, window state,
* and render parameters that the portlet can access via the
* PortletResourceRequest with getPortletMode and, getWindowState, or one of the
* getParameter methods. ResourceURLs cannot change the current portlet mode,
* window state or render parameters. Parameters set on a resource URL are not
* render parameters but parameters for serving this resource and will last only
* for only this the current serveResource request.
* If a parameter is set that has the same name as a render parameter that this
* resource URL contains, the render parameter must be the last entry in the
* parameter value array.
* @extends Clouber.sys.portlet.ClientDataRequest
* @interface
*/
Clouber.sys.portlet.ResourceRequest = function () {
    'use strict';

    /**
    * Returns the cache level of this resource request.
    * @function
    * @return {String}
    */
    this.getCacheability = function () {};

    /**
    * Returns the validation tag if the portlet container has a cached response
    * for this validation tag, or null if no cached response exists.
    * @function
    * @return {String}
    */
    this.getETag = function () {};

    /**
    * Returns a Map of the private render parameters of this request.
    * @function
    * @return {array} name/value map
    */
    this.getPrivateRenderParameterMap = function () {};

    /**
    * Returns the resource ID set on the ResourceURL or null if no resource ID
    * was set on the URL.
    * @function
    * @return {String}
    */
    this.getResourceID = function () {};

    /**
    * Returns the portal preferred content type for the response.
    * @function
    * @return {String}
    */
    this.getResponseContentType = function () {};

    /**
    * Gets a list of content types which the portal accepts for the response.
    * @function
    * @return {array(string)}
    */
    this.getResponseContentTypes = function () {};


};
Clouber.extend(Clouber.sys.portlet.ResourceRequest,
    Clouber.sys.portlet.ClientDataRequest);



/**
* <JSR-286> public interface PortletResponse
* The PortletResponse defines the base interface to assist a portlet in
* creating and sending a response to the client. The portlet container uses
* specialized versions of this interface when invoking a portlet. The portlet
* container creates these objects and passes them as arguments to the portlet's
* processAction, processEvent, serveResource and render methods.
* @interface
*/
Clouber.sys.portlet.PortletResponse = function () {
    'use strict';

    /**
    * Adds a HTTP Cookie property to the response.
    *  The portlet should note that the cookie may not make it to the client,
    * but may be stored at the portal.
    * @function
    * @param {object} Cookie
    */
    this.addProperty = function (cookie) {};

    /**
    * Adds an XML DOM element property to the response.
    * @function
    * @param {String} key
    * @param {Object} dom.Element
    */
    this.addProperty = function (key, element) {};

    /**
    * Adds a String property to an existing key to be returned to the portal.
    * @function
    * @param {String} key
    * @param {String} value
    */
    this.addProperty = function (key, value) {};

    /**
    * Creates an element of the type specified to be used in the
    * addProperty(String,Element) method.
    * @function
    * @param {String} tagName
    * @return {object} dom.Element
    */
    this.createElement = function (tagName) {};

    /**
    * Returns the encoded URL of the resource, like servlets, JSPs, images and
    * other static files, at the given path.
    * @function
    * @param {String} path
    * @return {String}
    */
    this.encodeURL = function (path) {};

    /**
    * The value returned by this method should be prefixed or appended to
    * elements, such as JavaScript variables or function names, to ensure they
    * are unique in the context of the portal page.
    * @function
    * @return {String}
    */
    this.getNamespace = function () {};

    /**
    * Sets a String property to be returned to the portal.
    * @function
    * @param {String} key
    * @param {String} value
    */
    this.setProperty = function (key, value) {};

};

/**
* <JSR-286> public interface StateAwareResponse
* extends PortletResponse
* The StateAwareResponse represents a response that can modify state
* information or send events.
* It extends the PortletResponse interface.
* @extends Clouber.sys.portlet.PortletResponse
* @interface
*/
Clouber.sys.portlet.StateAwareResponse = function () {
    'use strict';

    /**
    * Returns the currently set portlet mode on this reponse.
    * @function
    * @return {object} PortletMode
    */
    this.getPortletMode = function () {};

    /**
    * Returns a Map of the render parameters currently set on this response.
    * @function
    * @return {object} string map
    */
    this.getRenderParameterMap = function () {};

    /**
    * Returns the currently set window state on this response.
    * @function
    * @return {object} WindowState
    */
    this.getWindowState = function () {};

    /**
    * Removes the specified public render parameter.
    * @function
    * @param {name}
    */
    this.removePublicRenderParameter = function (name) {};

    /**
    * Publishes an Event with the given payload.
    * @function
    * @param {object} QName
    * @param {object} value
    */
    this.setEvent = function (name, value) {};

    /**
    * Publishes an Event with the given payload in the default namespace.
    * @function
    * @param {String} name
    * @param {object} value
    */
    this.setEvent = function (name, value) {};

    /**
    * Sets the portlet mode of a portlet to the given portlet mode.
    * @function
    * @param {object} portletMode
    */
    this.setPortletMode = function (portletMode) {};

    /**
    * Sets a String parameter for the render request.
    * @function
    * @param {String} key
    * @param {String} value
    */
    this.setRenderParameter = function (key, value) {};

    /**
    * Sets a String array parameter for the render request.
    * @function
    * @param {String} key
    * @param {array(String)} values
    */
    this.setRenderParameter = function (key, values) {};

    /**
    * Sets a parameter map for the render request.
    * @function
    * @param {array} parameters string map
    */
    this.setRenderParameters = function (parameters) {};

    /**
    * Sets the window state of a portlet to the given window state.
    * @function
    * @param {object} windowState
    */
    this.setWindowState = function (windowState) {};


};
Clouber.extend(Clouber.sys.portlet.StateAwareResponse,
    Clouber.sys.portlet.PortletResponse);

/**
* <JSR-286> public interface MimeResponse
* extends PortletResponse
* The MimeResponse defines the base interface to assist a portlet in returning
* MIME content.
* @extends Clouber.sys.portlet.PortletResponse
* @interface
*/
Clouber.sys.portlet.MimeResponse = function () {
    'use strict';

    /**
    * Creates a portlet URL targeting the portlet.
    * @function
    * @return {object} PortletURL
    */
    this.createActionURL = function () {};

     /**
    * Creates a portlet URL targeting the portlet.
    * @function
    * @param {}
    * @return {object} PortletURL
    */
    this.createRenderURL = function () {};

    /**
    * Creates a portlet URL targeting the portlet.
    * @function
    * @param {}
    * @return {object} ResourceURL
    */
    this.createResourceURL = function () {};

    /**
    * Forces any content in the buffer to be written to the underlying output
    * stream.
    * @function
    */
    this.flushBuffer = function () {};

    /**
    * Returns the actual buffer size used for the response.
    * @function
    * @return {int}
    */
    this.getBufferSize = function () {};

    /**
    * Returns the cache control object allowing to set specific cache settings
    * valid for the markup returned in this response.
    * @function
    * @return {object} CacheControl
    */
    this.getCacheControl = function () {};

    /**
    * Returns the name of the charset used for the MIME body sent in this
    * response.
    * @function
    * @return {String}
    */
    this.getCharacterEncoding = function () {};

    /**
    * Returns the MIME type that can be used to contribute markup to the render
    * response.
    * @function
    * @return {String}
    */
    this.getContentType = function () {};

    /**
    * Returns the locale assigned to the response.
    * @function
    * @return {object} Locale
    */
    this.getLocale = function () {};

    /**
    * Returns a OutputStream suitable for writing binary data in the response.
    * @function
    * @return {object} OutputStream
    */
    this.getPortletOutputStream = function () {};

    /**
    * Returns a PrintWriter object that can send character text to the portal.
    * @function
    * @param {}
    * @return {object} PrintWriter
    */
    this.getWriter = function () {};

    /**
    * Returns a boolean indicating if the response has been committed.
    * @function
    * @param {}
    * @return {boolean}
    */
    this.isCommitted = function () {};

    /**
    * Clears any data that exists in the buffer as well as the properties set.
    * @function
    */
    this.reset = function () {};

    /**
    * Clears the content of the underlying buffer in the response without
    * clearing properties set.
    * @function
    */
    this.resetBuffer = function () {};

    /**
    * Sets the preferred buffer size for the body of the response.
    * @function
    * @param {int} size
    * @return {}
    */
    this.setBufferSize = function (size) {};

    /**
    * Sets the MIME type for the response.
    * @function
    * @param {String}  type
    */
    this.setContentType = function (type) {};


};
Clouber.extend(Clouber.sys.portlet.MimeResponse,
    Clouber.sys.portlet.PortletResponse);


/**
* <JSR-286> public interface ActionResponse
* extends StateAwareResponse
* The ActionResponse interface represents the portlet response to an action
* request. It extends the StateAwareResponse interface to provide specific
* action response functionality to portlets.
*  The portlet container creates an ActionResponse object and passes it as
* argument to the portlet's processAction method.
* @extends Clouber.sys.portlet.StateAwareResponse
* @interface
*/
Clouber.sys.portlet.ActionResponse = function () {
    'use strict';

    /**
    * Instructs the portlet container to send a redirect response to the client
    * using the specified redirect location URL.
    * @function
    * @param {String} location
    */
    this.sendRedirect = function (location) {};

    /**
    * Instructs the portlet container to send a redirect response to the client
    * using the specified redirect location URL and encode a render URL as
    * parameter on the redirect URL.
    * @function
    * @param {String} location
    * @param {String} renderUrlParamName
    */
    this.sendRedirect = function (location, renderUrlParamName) {};

};
Clouber.extend(Clouber.sys.portlet.ActionResponse,
    Clouber.sys.portlet.StateAwareResponse);

/**
* public interface EventResponseextends StateAwareResponse
* The EventResponse interface represents the portlet response to an event
* request. It extends the StateAwareResponse interface.
* The portlet container creates an EventResponse object and passes it as
* argument to the portlet's processEvent method.
* @extends Clouber.sys.portlet.StateAwareResponse
* @interface
*/
Clouber.sys.portlet.EventResponse = function () {
    'use strict';

    /**
    * Maintain the current render parameters of the request for the response.
    * @function
    * @param {object} request EventRequest
    */
    this.setRenderParameters = function (request) {};

};
Clouber.extend(Clouber.sys.portlet.EventResponse,
    Clouber.sys.portlet.StateAwareResponse);

/**
* public interface RenderResponse
* extends MimeResponse
* The RenderResponse defines an object to assist a portlet in sending a
* response to the portal. It extends the MimeResponse interface to provide
* specific render response functionality to portlets.
* The portlet container creates a RenderResponse object and passes it as
* argument to the portlet's render method.
* @extends Clouber.sys.portlet.MimeResponse
* @interface
*/
Clouber.sys.portlet.RenderResponse = function () {
    'use strict';

    /**
    * Sets the MIME type for the render response.
    * @function
    * @param {String} type
    */
    this.setContentType = function (type) {};

    /**
    * This method allows the portlet to tell the portal the next possible
    * portlet modes that the make sense from the portlet point of view.
    * @function
    * @param {array} portletModes
    */
    this.setNextPossiblePortletModes = function (portletModes) {};

    /**
    * This method sets the title of the portlet.
    * @function
    * @param {String} title
    */
    this.setTitle = function (title) {};

};
Clouber.extend(Clouber.sys.portlet.RenderResponse,
    Clouber.sys.portlet.MimeResponse);

/**
* public interface ResourceResponse
* extends MimeResponse
* The ResourceResponse defines an object to assist a portlet for rendering a
* resource.
*
* The difference between the RenderResponse is that for the ResourceResponse
* the output of this response is delivered directly to the client without any
* additional markup added by the portal. It is therefore allowed for the
* portlet to return binary content in this response.
*
* A portlet can set HTTP headers for the response via the setProperty or
* addProperty call in the ResourceResponse. To be successfully transmitted
* back to the client, headers must be set before the response is committed.
* Headers set after the response is committed will be ignored by the portlet
* container.
*
* The portlet container creates a ResourceResponse object and passes it as
* argument to the portlet's serveResource method.
* @extends Clouber.sys.portlet.MimeResponse
* @interface
*/
Clouber.sys.portlet.ResourceResponse = function () {
    'use strict';

    /**
    * Creates a portlet URL targeting the portlet.
    * @function
    * @return {object} PortletURL
    */
    this.createActionURL = function () {};

    /**
    * Creates a portlet URL targeting the portlet.
    * @function
    * @return {object} PortletURL
    */
    this.createRenderURL = function () {};

    /**
    * Creates a portlet URL targeting the portlet.
    * @function
    * @return {object} ResourceURL
    */
    this.createResourceURL = function () {};

    /**
    * Sets the character encoding (MIME charset) of the response being sent to
    * the client, for example, to UTF-8.
    * @function
    * @param {String} charset
    */
    this.setCharacterEncoding = function (charset) {};

    /**
    * Sets the length of the content body in the response.
    * @function
    * @param {int} len
    */
    this.setContentLength = function (len) {};

    /**
    * Sets the locale of the response, setting the headers (including the
    * Content-Type's charset) as appropriate.
    * @function
    * @param {object} loc Locale
    */
    this.setLocale = function (loc) {};
};
Clouber.extend(Clouber.sys.portlet.ResourceResponse,
    Clouber.sys.portlet.MimeResponse);


    
    
/**
* public interface PortletContext
* The PortletContext interface defines a portlet view of the portlet container. 
* The PortletContext also makes resources available to the portlet. Using the 
* context, a portlet can access the portlet log, and obtain URL references to 
* resources. 
* @interface PortletContext
*/
Clouber.sys.portlet.PortletContext = function () {
    'use strict';

    /**
    * Returns the portlet container attribute with the given name, or null if 
    * there is no attribute by that name.
    * @function getAttribute
    * @param {String} name
    * @param {} 
    * @return {Object} 
    */
    this.getAttribute = function (name) {};
           
    /**
    * Returns an Enumeration containing the attribute names available within 
    * this portlet context, or an empty Enumeration if no attributes are available.
    * @function getAttributeNames
    * @return {Array(String)} 
    */
    this.getAttributeNames = function () {};

    /**
    * Returns the container container runtime options keys supported by this 
    * portlet container.
    * @function getContainerRuntimeOptions
    * @return {Array(String)} 
    */
    this.getContainerRuntimeOptions = function () {};
           
    /**
    * Returns a String containing the value of the named context-wide 
    * initialization parameter, or null if the parameter does not exist.
    * @function getInitParameter
    * @param {String} name
    * @return {String} 
    */
    this.getInitParameter = function (name) {};
           
    /**
    * Returns the names of the context initialization parameters as an 
    * Enumeration of String objects, or an empty Enumeration if the context has 
    * no initialization parameters.
    * @function getInitParameterNames
    * @return {Array(String)} 
    */
    this.getInitParameterNames = function () {};
           
    /**
    * Returns the major version of the Portlet API that this portlet container 
    * supports.
    * @function getMajorVersion
    * @return {int} 
    */
    this.getMajorVersion = function () {};
           
    /**
    * Returns the MIME type of the specified file, or null if the MIME type is 
    * not known.
    * @function getMimeType
    * @param {String} file
    * @return {String} 
    */
    this.getMimeType = function (file) {};

    /**
    * Returns the minor version of the Portlet API that this portlet container 
    * supports.
    * @function getMinorVersion
    * @param {} 
    * @param {} 
    * @return {int} 
    */
    this.getMinorVersion = function () {};
           
    /**
    * Returns the name of this portlet application correponding to this 
    * PortletContext as specified in the web.xml deployment descriptor for this 
    * web application by the display-name element.
    * @function getPortletContextName
    * @return {String} 
    */
    this.getPortletContextName = function () {};
           
    /**
    * Returns a String containing the real path for a given virtual path.
    * @function getRealPath
    * @param {String} path
    * @return {String} 
    */
    this.getRealPath = function (java.lang.String path) {};
           
    /**
    * Returns a URL to the resource that is mapped to a specified path.
    * @function getResource
    * @param {String} path
    * @param {} 
    * @return {URL} 
    */
    this.getResource = function (java.lang.String path) {};
           
    /**
    * Returns a directory-like listing of all the paths to resources within the 
    * web application longest sub-path of which matches the supplied path 
    * argument.
    * @function getResourcePaths
    * @param {String} path
    * @return {Array(string)} 
    */
    this.getResourcePaths = function (path) {};
           
    /**
    * Returns the name and version of the portlet container in which the 
    * portlet is running.
    * @function getServerInfo
    * @return {String} 
    */
    this.getServerInfo = function () {};
           
    /**
    * Writes an explanatory message and a stack trace for a given Throwable 
    * exception to the portlet log file.
    * @function log
    * @param {String} message
    * @param {Exception} throwable
    */
    this.log = function (message, throwable) {};
           
    /**
    * Removes the attribute with the given name from the portlet context.
    * @function removeAttribute
    * @param {String} name
    */
    this.removeAttribute = function (name) {};
           
    /**
    * Binds an object to a given attribute name in this portlet context.
    * @function setAttribute
    * @param {String} name
    * @param {Object} object
    */
    this.setAttribute = function (name, object) {};
           
};



